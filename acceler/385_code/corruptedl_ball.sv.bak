//-------------------------------------------------------------------------
//    Ball.sv                                                            --
//    Viral Mehta                                                        --
//    Spring 2005                                                        --
//                                                                       --
//    Modified by Stephen Kempf 03-01-2006                               --
//                              03-12-2007                               --
//    Translated by Joe Meng    07-07-2013                               --
//    Fall 2014 Distribution                                             --
//                                                                       --
//    For use with ECE 298 Lab 7                                         --
//    UIUC ECE Department                                                --
//-------------------------------------------------------------------------


module  ball ( input Reset, frame_clk,
					input [15:0] keycode,
					input [15:0]  data_x,
					input [15:0]  data_y,
               output [9:0]  BallX, BallY, BallS );
    
    logic [9:0] Ball_X_Pos, Ball_X_Motion, Ball_Y_Pos, Ball_Y_Motion, Ball_Size;

	 
    parameter [9:0] Ball_X_Center=320;  // Center position on the X axis
    parameter [9:0] Ball_Y_Center=240;  // Center position on the Y axis
    parameter [9:0] Ball_X_Min=0;       // Leftmost point on the X axis
    parameter [9:0] Ball_X_Max=638;     // Rightmost point on the X axis
    parameter [9:0] Ball_Y_Min=0;       // Topmost point on the Y axis
    parameter [9:0] Ball_Y_Max=478;     // Bottommost point on the Y axis
    parameter [9:0] Ball_X_Step=1;      // Step size on the X axis
    parameter [9:0] Ball_Y_Step=1;      // Step size on the Y axis

    assign Ball_Size = 4;  // assigns the value 4 as a 10-digit binary number, ie "0000000100"
		
    always_ff @ (posedge Reset or posedge frame_clk )
    begin: Move_Ball
        if (Reset)  // Asynchronous Reset
        begin 
				Ball_Y_Motion <= 10'd0; //Ball_Y_Step;
				Ball_X_Motion <= 10'd0; //Ball_X_Step;
				Ball_Y_Pos <= Ball_Y_Center;
				Ball_X_Pos <= Ball_X_Center;
        end
           
        else 
        begin 
				if ( (Ball_Y_Pos) > (Ball_Y_Max- Ball_Size) || (Ball_Y_Pos) < (Ball_Y_Min + Ball_Size) )  //Ball is at the top edge or bottom edge
					Ball_Y_Motion <= 0;//(~ (Ball_Y_Step) + 1'b1);  // 2's complement. 	
					  
				if ( (Ball_X_Pos) > (Ball_X_Max - Ball_Size) || (Ball_X_Pos) < (Ball_X_Min + Ball_Size))  // Ball is at the leftmost or Rightmost edge, BOUNCE!
					Ball_X_Motion <= 0;//(~ (Ball_X_Step) + 1'b1);  // 2's complement.
				
				
				if(keycode[15:8] == 8'h04) //A
				begin
					Ball_X_Motion <= -1;//A
				end
				else
				begin
					Ball_X_Motion <= 0;
				end
				
				
				if(keycode[15:8] == 8'h07) //D
				begin
					Ball_X_Motion <= 1;
				end
				else
				begin
					Ball_X_Motion <= 0;
				end
				
				if(keycode[15:8] == 8'h16) //S
				begin
					Ball_Y_Motion <= 1;//A
				end
				else
				begin
					Ball_Y_Motion <= 0;
				end
				
				if(keycode[15:8] == 8'h1A) //W
				begin
					Ball_Y_Motion <= -1;
				end
				else
				begin
					Ball_Y_Motion <= 0;
				end
				
				/*
				if(keycode == 16'd0) //there is no keycode
				begin
					Ball_Y_Motion <= 0;
					Ball_X_Motion <= 0;

				end
				*/
		end
				 Ball_Y_Pos <= (Ball_Y_Pos + Ball_Y_Motion);  // Update ball position
				 Ball_X_Pos <= (Ball_X_Pos + Ball_X_Motion);	 
    end
       
    assign BallX = Ball_X_Pos;
   
    assign BallY = Ball_Y_Pos;
   
    assign BallS = Ball_Size;
    

endmodule
