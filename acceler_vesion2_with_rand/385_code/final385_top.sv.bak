
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
//
//module 385_acc(
//
//	//////////// CLOCK //////////
//	input 		          		ADC_CLK_10,
//	input 		          		MAX10_CLK1_50,
//	input 		          		MAX10_CLK2_50,
//
//	//////////// SDRAM //////////
//	output		    [12:0]		DRAM_ADDR,
//	output		     [1:0]		DRAM_BA,
//	output		          		DRAM_CAS_N,
//	output		          		DRAM_CKE,
//	output		          		DRAM_CLK,
//	output		          		DRAM_CS_N,
//	inout 		    [15:0]		DRAM_DQ,
//	output		          		DRAM_LDQM,
//	output		          		DRAM_RAS_N,
//	output		          		DRAM_UDQM,
//	output		          		DRAM_WE_N,
//
//	//////////// SEG7 //////////
//	output		     [7:0]		HEX0,
//	output		     [7:0]		HEX1,
//	output		     [7:0]		HEX2,
//	output		     [7:0]		HEX3,
//	output		     [7:0]		HEX4,
//	output		     [7:0]		HEX5,
//
//	//////////// KEY //////////
//	input 		     [1:0]		KEY,
//
//	//////////// LED //////////
//	output		     [9:0]		LEDR,
//
//	//////////// SW //////////
//	input 		     [9:0]		SW,
//
//	//////////// VGA //////////
//	output		     [3:0]		VGA_B,
//	output		     [3:0]		VGA_G,
//	output		          		VGA_HS,
//	output		     [3:0]		VGA_R,
//	output		          		VGA_VS,
//
//	//////////// Accelerometer //////////
//	output		          		GSENSOR_CS_N,
//	input 		     [2:1]		GSENSOR_INT,
//	output		          		GSENSOR_SCLK,
//	inout 		          		GSENSOR_SDI,
//	inout 		          		GSENSOR_SDO,
//
//	//////////// Arduino //////////
//	inout 		    [15:0]		ARDUINO_IO,
//	inout 		          		ARDUINO_RESET_N,
//
//);

//===========================================================================
// accel.v
//
// Template module to get the DE10-Lite's accelerator working very quickly.
//
// 2020/05/17  Written (BB)
//
//===========================================================================

module final385_top(
   //////////// CLOCK //////////
   input 		          		ADC_CLK_10,
   input 		          		MAX10_CLK1_50,
   input 		          		MAX10_CLK2_50,

   //////////// SEG7 //////////
   output		     [7:0]		HEX0,
   output		     [7:0]		HEX1,
   output		     [7:0]		HEX2,
   output		     [7:0]		HEX3,
   output		     [7:0]		HEX4,
   output		     [7:0]		HEX5,

   //////////// KEY //////////
   input 		     [1:0]		KEY,

   //////////// LED //////////
   output		     [9:0]		LEDR,

   //////////// SW //////////
   input 		     [9:0]		SW,

   //////////// Accelerometer ports //////////
   output		          		GSENSOR_CS_N,
   input 		     [2:1]		GSENSOR_INT,
   output		          		GSENSOR_SCLK,
   inout 		          		GSENSOR_SDI,
   inout 		          		GSENSOR_SDO,
	
	
	///////// VGA /////////
	output             VGA_HS,
	output             VGA_VS,
	output   [ 3: 0]   VGA_R,
	output   [ 3: 0]   VGA_G,
	output   [ 3: 0]   VGA_B
   );

//===== Declarations
   localparam SPI_CLK_FREQ  = 200;  // SPI Clock (Hz)
   localparam UPDATE_FREQ   = 1;    // Sampling frequency (Hz)

   // clks and reset
   logic reset_n;
   logic clk, spi_clk, spi_clk_out;
	logic vssig, blank, sync, VGA_Clk;

   // output data
   logic data_update;
   logic [15:0] data_x, data_y;
	
	
	
	logic [9:0] drawxsig, drawysig, ballxsig, ballysig, ballsizesig;
	logic [7:0] Red, Blue, Green;

//===== Phase-locked Loop (PLL) instantiation. Code was copied from a module
//      produced by Quartus' IP Catalog tool.
ip ip_inst (
   .inclk0 ( MAX10_CLK1_50 ),
   .c0 ( clk ),                 // 25 MHz, phase   0 degrees
   .c1 ( spi_clk ),             //  2 MHz, phase   0 degrees
   .c2 ( spi_clk_out )          //  2 MHz, phase 270 degrees
   );

//===== Instantiation of the spi_control module which provides the logic to 
//      interface to the accelerometer.
spi_control #(     // parameters
      .SPI_CLK_FREQ   (SPI_CLK_FREQ),
      .UPDATE_FREQ    (UPDATE_FREQ))
   spi_ctrl (      // port connections
      .reset_n    (reset_n),
      .clk        (clk),
      .spi_clk    (spi_clk),
      .spi_clk_out(spi_clk_out),
      .data_update(data_update),
      .data_x     (data_x),
      .data_y     (data_y),
      .SPI_SDI    (GSENSOR_SDI),
      .SPI_SDO    (GSENSOR_SDO),
      .SPI_CSN    (GSENSOR_CS_N),
      .SPI_CLK    (GSENSOR_SCLK),
      .interrupt  (GSENSOR_INT)
   );

//===== Main block
//      To make the module do something visible, the 16-bit data_x is 
//      displayed on four of the HEX displays in hexadecimal format.

// Pressing KEY0 freezes the accelerometer's output
assign reset_n = KEY[0];

// 7-segment displays HEX0-3 show data_x in hexadecimal
HexDriver s0 (
   .In0      (data_x[3:0]),
   .Out0 (HEX0) );

HexDriver s1 (
   .In0      (data_x[7:4]),
   .Out0 (HEX1) );

HexDriver s2 (
   .In0      (data_x[11:8]),
   .Out0 (HEX2) );

HexDriver s3 (
   .In0      (data_x[15:12]),
   .Out0 (HEX3) );

// A few statements just to light some LEDs
HexDriver s4 ( .In0(SW[5:2]), .Out0(HEX4) );
HexDriver s5 ( .In0(SW[9:6]), .Out0(HEX5) );
//assign LEDR = {SW[9:8], data_x[7:0]};

	//vga module
	vga_controller vga (
					.Clk(MAX10_CLK1_50),
					.Reset(reset_n),
					.hs(VGA_HS),
					.vs(VGA_VS),
					.pixel_clk(VGA_Clk),
					.blank,
					.sync,
					.DrawX(drawxsig),
					.DrawY(drawysig)
	
	);
	
	
	//ball module 
	ball	b( 	.Reset(reset_n), 
					.frame_clk(VGA_VS),
					.data_x,
					.data_y,
					.BallX(ballxsig),
					.BallY(ballysig), 
					.BallS(ballsizesig) 
	);
	
	//color mapper module
	color_mapper	color0(
					.BallX(ballxsig), 
					.BallY(ballysig), 
					.DrawX(drawxsig), 
					.DrawY(drawysig), 
					.Ball_size(ballsizesig),
					.Red, 
					.Green, 
					.Blue 
	);



endmodule




//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================



